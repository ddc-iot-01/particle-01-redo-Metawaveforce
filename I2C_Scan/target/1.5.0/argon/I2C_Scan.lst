
c:/Users/IoTPa/Documents/Brian/Particle/Particle_01/I2C_Scan/target/1.5.0/argon/I2C_Scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001694  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d56b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e370  000d56b4  0001e370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000418  2003e3d8  2003e3d8  0002e3d8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d571c  000d571c  0002571c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5744  000d5744  00025744  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b0383  00000000  00000000  00025748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d629  00000000  00000000  000d5acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018279  00000000  00000000  000e30f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ef8  00000000  00000000  000fb36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b98  00000000  00000000  000fd265  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030ee8  00000000  00000000  00100dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001fc53  00000000  00000000  00131ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010100c  00000000  00000000  00151938  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bad4  00000000  00000000  00252944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f929 	bl	d5284 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f92e 	bl	d529a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e370 	.word	0x2003e370
   d4048:	000d56b4 	.word	0x000d56b4
   d404c:	2003e3d8 	.word	0x2003e3d8
   d4050:	2003e3d8 	.word	0x2003e3d8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fbc3 	bl	d47e4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d56b0 	.word	0x000d56b0
   d4080:	000d5678 	.word	0x000d5678

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f82b 	bl	d40e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bb69 	b.w	d4768 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba27 	b.w	d44e8 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba25 	b.w	d44e8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
 
#include <Wire.h>
 
 
void setup()
{
   d40b0:	b508      	push	{r3, lr}
  Wire.begin();
   d40b2:	f000 ff49 	bl	d4f48 <_Z19__fetch_global_Wirev>
   d40b6:	f000 fd7d 	bl	d4bb4 <_ZN7TwoWire5beginEv>
 
  Serial.begin(9600);
   d40ba:	f000 fc99 	bl	d49f0 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f000 fc83 	bl	d49cc <_ZN9USBSerial5beginEl>
  while (!Serial);                   // wait for serial monitor
   d40c6:	f000 fc93 	bl	d49f0 <_Z16_fetch_usbserialv>
   d40ca:	f000 fc86 	bl	d49da <_ZN9USBSerialcvbEv>
   d40ce:	2800      	cmp	r0, #0
   d40d0:	d0f9      	beq.n	d40c6 <setup+0x16>
  Serial.println("\nI2C Scanner");
   d40d2:	f000 fc8d 	bl	d49f0 <_Z16_fetch_usbserialv>
   d40d6:	4902      	ldr	r1, [pc, #8]	; (d40e0 <setup+0x30>)
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  Wire.begin();
 
  Serial.begin(9600);
  while (!Serial);                   // wait for serial monitor
  Serial.println("\nI2C Scanner");
   d40dc:	f000 bac9 	b.w	d4672 <_ZN5Print7printlnEPKc>
   d40e0:	000d5320 	.word	0x000d5320

000d40e4 <loop>:
}
 
 
void loop()
{
   d40e4:	b570      	push	{r4, r5, r6, lr}
  byte error, address;
  int nDevices;
 
  Serial.println("Scanning...");
   d40e6:	f000 fc83 	bl	d49f0 <_Z16_fetch_usbserialv>
   d40ea:	4929      	ldr	r1, [pc, #164]	; (d4190 <loop+0xac>)
   d40ec:	f000 fac1 	bl	d4672 <_ZN5Print7printlnEPKc>
   d40f0:	2401      	movs	r4, #1
 
  nDevices = 0;
   d40f2:	2500      	movs	r5, #0
  for(address = 1; address < 127; address++ )
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
   d40f4:	f000 ff28 	bl	d4f48 <_Z19__fetch_global_Wirev>
   d40f8:	b2e1      	uxtb	r1, r4
   d40fa:	f000 fd61 	bl	d4bc0 <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   d40fe:	f000 ff23 	bl	d4f48 <_Z19__fetch_global_Wirev>
   d4102:	f000 fd65 	bl	d4bd0 <_ZN7TwoWire15endTransmissionEv>
 
    if (error == 0)
   d4106:	b9c0      	cbnz	r0, d413a <loop+0x56>
    {
      Serial.print("I2C device found at address 0x");
   d4108:	f000 fc72 	bl	d49f0 <_Z16_fetch_usbserialv>
   d410c:	4921      	ldr	r1, [pc, #132]	; (d4194 <loop+0xb0>)
   d410e:	f000 fa9d 	bl	d464c <_ZN5Print5printEPKc>
      if (address<16)
   d4112:	2c0f      	cmp	r4, #15
   d4114:	d804      	bhi.n	d4120 <loop+0x3c>
        Serial.print("0");
   d4116:	f000 fc6b 	bl	d49f0 <_Z16_fetch_usbserialv>
   d411a:	491f      	ldr	r1, [pc, #124]	; (d4198 <loop+0xb4>)
   d411c:	f000 fa96 	bl	d464c <_ZN5Print5printEPKc>
      Serial.print(address,HEX);
   d4120:	f000 fc66 	bl	d49f0 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4124:	2210      	movs	r2, #16
   d4126:	4621      	mov	r1, r4
   d4128:	f000 faad 	bl	d4686 <_ZN5Print11printNumberEmh>
      Serial.println("  !");
   d412c:	f000 fc60 	bl	d49f0 <_Z16_fetch_usbserialv>
   d4130:	491a      	ldr	r1, [pc, #104]	; (d419c <loop+0xb8>)
   d4132:	f000 fa9e 	bl	d4672 <_ZN5Print7printlnEPKc>
 
      nDevices++;
   d4136:	3501      	adds	r5, #1
   d4138:	e017      	b.n	d416a <loop+0x86>
    }
    else if (error==4)
   d413a:	2804      	cmp	r0, #4
   d413c:	d115      	bne.n	d416a <loop+0x86>
    {
      Serial.print("Unknown error at address 0x");
   d413e:	f000 fc57 	bl	d49f0 <_Z16_fetch_usbserialv>
   d4142:	4917      	ldr	r1, [pc, #92]	; (d41a0 <loop+0xbc>)
   d4144:	f000 fa82 	bl	d464c <_ZN5Print5printEPKc>
      if (address<16)
   d4148:	2c0f      	cmp	r4, #15
   d414a:	d804      	bhi.n	d4156 <loop+0x72>
        Serial.print("0");
   d414c:	f000 fc50 	bl	d49f0 <_Z16_fetch_usbserialv>
   d4150:	4911      	ldr	r1, [pc, #68]	; (d4198 <loop+0xb4>)
   d4152:	f000 fa7b 	bl	d464c <_ZN5Print5printEPKc>
      Serial.println(address,HEX);
   d4156:	f000 fc4b 	bl	d49f0 <_Z16_fetch_usbserialv>
   d415a:	2210      	movs	r2, #16
   d415c:	4606      	mov	r6, r0
   d415e:	4621      	mov	r1, r4
   d4160:	f000 fa91 	bl	d4686 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4164:	4630      	mov	r0, r6
   d4166:	f000 fa78 	bl	d465a <_ZN5Print7printlnEv>
   d416a:	3401      	adds	r4, #1
  int nDevices;
 
  Serial.println("Scanning...");
 
  nDevices = 0;
  for(address = 1; address < 127; address++ )
   d416c:	2c7f      	cmp	r4, #127	; 0x7f
   d416e:	d1c1      	bne.n	d40f4 <loop+0x10>
      if (address<16)
        Serial.print("0");
      Serial.println(address,HEX);
    }    
  }
  if (nDevices == 0)
   d4170:	b91d      	cbnz	r5, d417a <loop+0x96>
    Serial.println("No I2C devices found\n");
   d4172:	f000 fc3d 	bl	d49f0 <_Z16_fetch_usbserialv>
   d4176:	490b      	ldr	r1, [pc, #44]	; (d41a4 <loop+0xc0>)
   d4178:	e002      	b.n	d4180 <loop+0x9c>
  else
    Serial.println("done\n");
   d417a:	f000 fc39 	bl	d49f0 <_Z16_fetch_usbserialv>
   d417e:	490a      	ldr	r1, [pc, #40]	; (d41a8 <loop+0xc4>)
   d4180:	f000 fa77 	bl	d4672 <_ZN5Print7printlnEPKc>
 
  delay(5000);           // wait 5 seconds for next scan
   d4184:	f241 3088 	movw	r0, #5000	; 0x1388
   d4188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (nDevices == 0)
    Serial.println("No I2C devices found\n");
  else
    Serial.println("done\n");
 
  delay(5000);           // wait 5 seconds for next scan
   d418c:	f000 baae 	b.w	d46ec <delay>
   d4190:	000d532d 	.word	0x000d532d
   d4194:	000d5339 	.word	0x000d5339
   d4198:	000d5358 	.word	0x000d5358
   d419c:	000d535a 	.word	0x000d535a
   d41a0:	000d535e 	.word	0x000d535e
   d41a4:	000d537a 	.word	0x000d537a
   d41a8:	000d5390 	.word	0x000d5390

000d41ac <_GLOBAL__sub_I_setup>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41ac:	f000 b810 	b.w	d41d0 <HAL_Pin_Map>

000d41b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <netdb_freeaddrinfo+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	689b      	ldr	r3, [r3, #8]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	00030268 	.word	0x00030268

000d41c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <netdb_getaddrinfo+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	68db      	ldr	r3, [r3, #12]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	00030268 	.word	0x00030268

000d41d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_Pin_Map+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	681b      	ldr	r3, [r3, #0]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	0003022c 	.word	0x0003022c

000d41e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_RNG_GetRandomNumber+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	685b      	ldr	r3, [r3, #4]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030218 	.word	0x00030218

000d41f0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	695b      	ldr	r3, [r3, #20]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030218 	.word	0x00030218

000d4200 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <os_thread_is_current+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	689b      	ldr	r3, [r3, #8]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030248 	.word	0x00030248

000d4210 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <os_thread_join+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	691b      	ldr	r3, [r3, #16]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030248 	.word	0x00030248

000d4220 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <os_thread_cleanup+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	695b      	ldr	r3, [r3, #20]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030248 	.word	0x00030248

000d4230 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <os_mutex_recursive_create+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030248 	.word	0x00030248

000d4240 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_mutex_recursive_destroy+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <inet_inet_ntop+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	695b      	ldr	r3, [r3, #20]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030264 	.word	0x00030264

000d4260 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <HAL_USART_Init+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	681b      	ldr	r3, [r3, #0]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	0003023c 	.word	0x0003023c

000d4270 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <HAL_USART_Write_Data+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	68db      	ldr	r3, [r3, #12]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003023c 	.word	0x0003023c

000d4280 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_USART_Available_Data+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	691b      	ldr	r3, [r3, #16]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003023c 	.word	0x0003023c

000d4290 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_USART_Read_Data+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	695b      	ldr	r3, [r3, #20]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003023c 	.word	0x0003023c

000d42a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_USART_Peek_Data+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	699b      	ldr	r3, [r3, #24]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003023c 	.word	0x0003023c

000d42b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_USART_Flush_Data+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	69db      	ldr	r3, [r3, #28]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003023c 	.word	0x0003023c

000d42c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USART_Available_Data_For_Write+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_I2C_Begin+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	68db      	ldr	r3, [r3, #12]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030228 	.word	0x00030228

000d42e0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_I2C_Begin_Transmission+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	699b      	ldr	r3, [r3, #24]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030228 	.word	0x00030228

000d42f0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_I2C_End_Transmission+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	69db      	ldr	r3, [r3, #28]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030228 	.word	0x00030228

000d4300 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_I2C_Write_Data+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6a1b      	ldr	r3, [r3, #32]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030228 	.word	0x00030228

000d4310 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_I2C_Available_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030228 	.word	0x00030228

000d4320 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_I2C_Read_Data+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030228 	.word	0x00030228

000d4330 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_I2C_Peek_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030228 	.word	0x00030228

000d4340 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_I2C_Flush_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_I2C_Init+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030228 	.word	0x00030228

000d4360 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Init+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	681b      	ldr	r3, [r3, #0]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Begin+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	685b      	ldr	r3, [r3, #4]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Available_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	691b      	ldr	r3, [r3, #16]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Receive_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	699b      	ldr	r3, [r3, #24]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Send_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	69db      	ldr	r3, [r3, #28]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Flush_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6a1b      	ldr	r3, [r3, #32]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_USB_USART_Is_Enabled+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003024c 	.word	0x0003024c

000d43e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <set_system_mode+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	685b      	ldr	r3, [r3, #4]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030220 	.word	0x00030220

000d43f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <system_delay_ms+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	695b      	ldr	r3, [r3, #20]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030220 	.word	0x00030220

000d4400 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b03      	ldr	r3, [pc, #12]	; (d4410 <system_ctrl_set_app_request_handler+0x10>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d440a:	9301      	str	r3, [sp, #4]
   d440c:	bd08      	pop	{r3, pc}
   d440e:	0000      	.short	0x0000
   d4410:	00030220 	.word	0x00030220

000d4414 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b03      	ldr	r3, [pc, #12]	; (d4424 <system_ctrl_set_result+0x10>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d441e:	9301      	str	r3, [sp, #4]
   d4420:	bd08      	pop	{r3, pc}
   d4422:	0000      	.short	0x0000
   d4424:	00030220 	.word	0x00030220

000d4428 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <network_connect+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	685b      	ldr	r3, [r3, #4]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030240 	.word	0x00030240

000d4438 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <network_connecting+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	689b      	ldr	r3, [r3, #8]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030240 	.word	0x00030240

000d4448 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <network_disconnect+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	68db      	ldr	r3, [r3, #12]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030240 	.word	0x00030240

000d4458 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <network_ready+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	691b      	ldr	r3, [r3, #16]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030240 	.word	0x00030240

000d4468 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_on+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	695b      	ldr	r3, [r3, #20]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_off+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	699b      	ldr	r3, [r3, #24]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_listen+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	69db      	ldr	r3, [r3, #28]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_listening+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6a1b      	ldr	r3, [r3, #32]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <network_set_listen_timeout+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030240 	.word	0x00030240

000d44b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <network_get_listen_timeout+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030240 	.word	0x00030240

000d44c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030244 	.word	0x00030244

000d44d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <malloc+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	681b      	ldr	r3, [r3, #0]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003021c 	.word	0x0003021c

000d44e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <free+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	685b      	ldr	r3, [r3, #4]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003021c 	.word	0x0003021c

000d44f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d44f8:	2200      	movs	r2, #0
   d44fa:	4611      	mov	r1, r2
   d44fc:	6840      	ldr	r0, [r0, #4]
   d44fe:	f7ff bfcb 	b.w	d4498 <network_listening>

000d4502 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4502:	2200      	movs	r2, #0
   d4504:	4611      	mov	r1, r2
   d4506:	6840      	ldr	r0, [r0, #4]
   d4508:	f7ff bfd6 	b.w	d44b8 <network_get_listen_timeout>

000d450c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d450c:	2200      	movs	r2, #0
   d450e:	6840      	ldr	r0, [r0, #4]
   d4510:	f7ff bfca 	b.w	d44a8 <network_set_listen_timeout>

000d4514 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4514:	2200      	movs	r2, #0
   d4516:	f081 0101 	eor.w	r1, r1, #1
   d451a:	6840      	ldr	r0, [r0, #4]
   d451c:	f7ff bfb4 	b.w	d4488 <network_listen>

000d4520 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4520:	2300      	movs	r3, #0
   d4522:	461a      	mov	r2, r3
   d4524:	4619      	mov	r1, r3
   d4526:	6840      	ldr	r0, [r0, #4]
   d4528:	f7ff bfa6 	b.w	d4478 <network_off>

000d452c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d452c:	2300      	movs	r3, #0
   d452e:	461a      	mov	r2, r3
   d4530:	4619      	mov	r1, r3
   d4532:	6840      	ldr	r0, [r0, #4]
   d4534:	f7ff bf98 	b.w	d4468 <network_on>

000d4538 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4538:	2200      	movs	r2, #0
   d453a:	4611      	mov	r1, r2
   d453c:	6840      	ldr	r0, [r0, #4]
   d453e:	f7ff bf8b 	b.w	d4458 <network_ready>

000d4542 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4542:	2200      	movs	r2, #0
   d4544:	4611      	mov	r1, r2
   d4546:	6840      	ldr	r0, [r0, #4]
   d4548:	f7ff bf76 	b.w	d4438 <network_connecting>

000d454c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d454c:	2200      	movs	r2, #0
   d454e:	2102      	movs	r1, #2
   d4550:	6840      	ldr	r0, [r0, #4]
   d4552:	f7ff bf79 	b.w	d4448 <network_disconnect>

000d4556 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4556:	2300      	movs	r3, #0
   d4558:	461a      	mov	r2, r3
   d455a:	6840      	ldr	r0, [r0, #4]
   d455c:	f7ff bf64 	b.w	d4428 <network_connect>

000d4560 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4560:	4b02      	ldr	r3, [pc, #8]	; (d456c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4562:	2203      	movs	r2, #3
   d4564:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4566:	4a02      	ldr	r2, [pc, #8]	; (d4570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4568:	601a      	str	r2, [r3, #0]
   d456a:	4770      	bx	lr
   d456c:	2003e3dc 	.word	0x2003e3dc
   d4570:	000d53a0 	.word	0x000d53a0

000d4574 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4574:	b510      	push	{r4, lr}
   d4576:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4578:	6800      	ldr	r0, [r0, #0]
   d457a:	b118      	cbz	r0, d4584 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d457c:	f7ff ffb4 	bl	d44e8 <free>
            wakeupSource_ = nullptr;
   d4580:	2300      	movs	r3, #0
   d4582:	6023      	str	r3, [r4, #0]
   d4584:	bd10      	pop	{r4, pc}

000d4586 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4586:	b510      	push	{r4, lr}
   d4588:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d458a:	f7ff fff3 	bl	d4574 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d458e:	4620      	mov	r0, r4
   d4590:	bd10      	pop	{r4, pc}
	...

000d4594 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4594:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4596:	4c09      	ldr	r4, [pc, #36]	; (d45bc <_GLOBAL__sub_I_System+0x28>)
   d4598:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d459a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d459e:	6020      	str	r0, [r4, #0]
   d45a0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d45a2:	71a0      	strb	r0, [r4, #6]
   d45a4:	8120      	strh	r0, [r4, #8]
   d45a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45a8:	f7ff ff1a 	bl	d43e0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d45ac:	4620      	mov	r0, r4
   d45ae:	4a04      	ldr	r2, [pc, #16]	; (d45c0 <_GLOBAL__sub_I_System+0x2c>)
   d45b0:	4904      	ldr	r1, [pc, #16]	; (d45c4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d45b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d45b6:	f000 bced 	b.w	d4f94 <__aeabi_atexit>
   d45ba:	bf00      	nop
   d45bc:	2003e3e4 	.word	0x2003e3e4
   d45c0:	2003e3d8 	.word	0x2003e3d8
   d45c4:	000d4587 	.word	0x000d4587

000d45c8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d45c8:	b510      	push	{r4, lr}
   d45ca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d45cc:	6800      	ldr	r0, [r0, #0]
   d45ce:	b108      	cbz	r0, d45d4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d45d0:	f7ff fe36 	bl	d4240 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d45d4:	4620      	mov	r0, r4
   d45d6:	bd10      	pop	{r4, pc}

000d45d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d45d8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d45da:	4c06      	ldr	r4, [pc, #24]	; (d45f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d45dc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d45de:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d45e0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d45e2:	f7ff fe25 	bl	d4230 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d45e6:	4620      	mov	r0, r4
   d45e8:	4a03      	ldr	r2, [pc, #12]	; (d45f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d45ea:	4904      	ldr	r1, [pc, #16]	; (d45fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d45ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d45f0:	f000 bcd0 	b.w	d4f94 <__aeabi_atexit>
   d45f4:	2003e3f0 	.word	0x2003e3f0
   d45f8:	2003e3d8 	.word	0x2003e3d8
   d45fc:	000d45c9 	.word	0x000d45c9

000d4600 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4602:	4606      	mov	r6, r0
   d4604:	460d      	mov	r5, r1
   d4606:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4608:	2400      	movs	r4, #0
  while (size--) {
   d460a:	42bd      	cmp	r5, r7
   d460c:	d00c      	beq.n	d4628 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d460e:	6833      	ldr	r3, [r6, #0]
   d4610:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4614:	689b      	ldr	r3, [r3, #8]
   d4616:	4630      	mov	r0, r6
   d4618:	4798      	blx	r3
     if (chunk>=0)
   d461a:	2800      	cmp	r0, #0
   d461c:	db01      	blt.n	d4622 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d461e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4620:	e7f3      	b.n	d460a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4622:	2c00      	cmp	r4, #0
   d4624:	bf08      	it	eq
   d4626:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4628:	4620      	mov	r0, r4
   d462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d462c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d462c:	b570      	push	{r4, r5, r6, lr}
   d462e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4630:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4632:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4634:	b149      	cbz	r1, d464a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4636:	f000 fe61 	bl	d52fc <strlen>
   d463a:	682b      	ldr	r3, [r5, #0]
   d463c:	4602      	mov	r2, r0
   d463e:	4621      	mov	r1, r4
   d4640:	4628      	mov	r0, r5
   d4642:	68db      	ldr	r3, [r3, #12]
    }
   d4644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4648:	4718      	bx	r3
    }
   d464a:	bd70      	pop	{r4, r5, r6, pc}

000d464c <_ZN5Print5printEPKc>:
   d464c:	b508      	push	{r3, lr}
   d464e:	f7ff ffed 	bl	d462c <_ZN5Print5writeEPKc>
   d4652:	bd08      	pop	{r3, pc}

000d4654 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4654:	6803      	ldr	r3, [r0, #0]
   d4656:	689b      	ldr	r3, [r3, #8]
   d4658:	4718      	bx	r3

000d465a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d465a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d465c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d465e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4660:	f7ff fff8 	bl	d4654 <_ZN5Print5printEc>
  n += print('\n');
   d4664:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4666:	4604      	mov	r4, r0
  n += print('\n');
   d4668:	4628      	mov	r0, r5
   d466a:	f7ff fff3 	bl	d4654 <_ZN5Print5printEc>
  return n;
}
   d466e:	4420      	add	r0, r4
   d4670:	bd38      	pop	{r3, r4, r5, pc}

000d4672 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4672:	b538      	push	{r3, r4, r5, lr}
   d4674:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4676:	f7ff ffd9 	bl	d462c <_ZN5Print5writeEPKc>
   d467a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d467c:	4628      	mov	r0, r5
   d467e:	f7ff ffec 	bl	d465a <_ZN5Print7printlnEv>
  return n;
}
   d4682:	4420      	add	r0, r4
   d4684:	bd38      	pop	{r3, r4, r5, pc}

000d4686 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4686:	b530      	push	{r4, r5, lr}
   d4688:	b08b      	sub	sp, #44	; 0x2c
   d468a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d468c:	2100      	movs	r1, #0
   d468e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4692:	2a01      	cmp	r2, #1
   d4694:	bf98      	it	ls
   d4696:	220a      	movls	r2, #10
   d4698:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d469c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d46a0:	fb05 3312 	mls	r3, r5, r2, r3
   d46a4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d46a8:	2b09      	cmp	r3, #9
   d46aa:	bf94      	ite	ls
   d46ac:	3330      	addls	r3, #48	; 0x30
   d46ae:	3337      	addhi	r3, #55	; 0x37
   d46b0:	b2db      	uxtb	r3, r3
   d46b2:	4621      	mov	r1, r4
   d46b4:	f804 3901 	strb.w	r3, [r4], #-1
   d46b8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d46ba:	2d00      	cmp	r5, #0
   d46bc:	d1ee      	bne.n	d469c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d46be:	f7ff ffb5 	bl	d462c <_ZN5Print5writeEPKc>
}
   d46c2:	b00b      	add	sp, #44	; 0x2c
   d46c4:	bd30      	pop	{r4, r5, pc}
	...

000d46c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d46c8:	4b01      	ldr	r3, [pc, #4]	; (d46d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d46ca:	4a02      	ldr	r2, [pc, #8]	; (d46d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d46cc:	601a      	str	r2, [r3, #0]
   d46ce:	4770      	bx	lr
   d46d0:	2003e3f4 	.word	0x2003e3f4
   d46d4:	000d543f 	.word	0x000d543f

000d46d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d46d8:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d46da:	681a      	ldr	r2, [r3, #0]
   d46dc:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d46de:	601a      	str	r2, [r3, #0]
   d46e0:	4770      	bx	lr
   d46e2:	bf00      	nop
   d46e4:	2003e370 	.word	0x2003e370
   d46e8:	2003e3f8 	.word	0x2003e3f8

000d46ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d46ec:	2100      	movs	r1, #0
   d46ee:	f7ff be7f 	b.w	d43f0 <system_delay_ms>

000d46f2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d46f4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46f6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d46f8:	b113      	cbz	r3, d4700 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d46fa:	2203      	movs	r2, #3
   d46fc:	4601      	mov	r1, r0
   d46fe:	4798      	blx	r3
    }
   d4700:	4620      	mov	r0, r4
   d4702:	bd10      	pop	{r4, pc}

000d4704 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4704:	b510      	push	{r4, lr}
   d4706:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4708:	f7ff fff3 	bl	d46f2 <_ZNSt14_Function_baseD1Ev>
   d470c:	4620      	mov	r0, r4
   d470e:	bd10      	pop	{r4, pc}

000d4710 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4710:	4803      	ldr	r0, [pc, #12]	; (d4720 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4712:	4a04      	ldr	r2, [pc, #16]	; (d4724 <_GLOBAL__sub_I_RGB+0x14>)
   d4714:	4904      	ldr	r1, [pc, #16]	; (d4728 <_GLOBAL__sub_I_RGB+0x18>)
   d4716:	2300      	movs	r3, #0
   d4718:	6083      	str	r3, [r0, #8]
   d471a:	f000 bc3b 	b.w	d4f94 <__aeabi_atexit>
   d471e:	bf00      	nop
   d4720:	2003e3fc 	.word	0x2003e3fc
   d4724:	2003e3d8 	.word	0x2003e3d8
   d4728:	000d4705 	.word	0x000d4705

000d472c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d472c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d472e:	4b0c      	ldr	r3, [pc, #48]	; (d4760 <serialEventRun+0x34>)
   d4730:	b133      	cbz	r3, d4740 <serialEventRun+0x14>
   d4732:	f000 f95d 	bl	d49f0 <_Z16_fetch_usbserialv>
   d4736:	6803      	ldr	r3, [r0, #0]
   d4738:	691b      	ldr	r3, [r3, #16]
   d473a:	4798      	blx	r3
   d473c:	2800      	cmp	r0, #0
   d473e:	dc09      	bgt.n	d4754 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4740:	4b08      	ldr	r3, [pc, #32]	; (d4764 <serialEventRun+0x38>)
   d4742:	b163      	cbz	r3, d475e <serialEventRun+0x32>
   d4744:	f000 f9d2 	bl	d4aec <_Z22__fetch_global_Serial1v>
   d4748:	6803      	ldr	r3, [r0, #0]
   d474a:	691b      	ldr	r3, [r3, #16]
   d474c:	4798      	blx	r3
   d474e:	2800      	cmp	r0, #0
   d4750:	dc03      	bgt.n	d475a <serialEventRun+0x2e>
   d4752:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4754:	f3af 8000 	nop.w
   d4758:	e7f2      	b.n	d4740 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d475a:	f3af 8000 	nop.w
   d475e:	bd08      	pop	{r3, pc}
	...

000d4768 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4768:	b508      	push	{r3, lr}
	serialEventRun();
   d476a:	f7ff ffdf 	bl	d472c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d476e:	f7ff fd3f 	bl	d41f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4772:	4b01      	ldr	r3, [pc, #4]	; (d4778 <_post_loop+0x10>)
   d4774:	6018      	str	r0, [r3, #0]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	2003e730 	.word	0x2003e730

000d477c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d477c:	4802      	ldr	r0, [pc, #8]	; (d4788 <_Z33system_initialize_user_backup_ramv+0xc>)
   d477e:	4a03      	ldr	r2, [pc, #12]	; (d478c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4780:	4903      	ldr	r1, [pc, #12]	; (d4790 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4782:	1a12      	subs	r2, r2, r0
   d4784:	f000 bd7e 	b.w	d5284 <memcpy>
   d4788:	2003f400 	.word	0x2003f400
   d478c:	2003f404 	.word	0x2003f404
   d4790:	000d56b0 	.word	0x000d56b0

000d4794 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4794:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4796:	2300      	movs	r3, #0
   d4798:	9300      	str	r3, [sp, #0]
   d479a:	461a      	mov	r2, r3
   d479c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d47a0:	f7ff fe38 	bl	d4414 <system_ctrl_set_result>
}
   d47a4:	b003      	add	sp, #12
   d47a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d47ac <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d47ac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d47ae:	8843      	ldrh	r3, [r0, #2]
   d47b0:	2b0a      	cmp	r3, #10
   d47b2:	d008      	beq.n	d47c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d47b4:	2b50      	cmp	r3, #80	; 0x50
   d47b6:	d109      	bne.n	d47cc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d47b8:	4b09      	ldr	r3, [pc, #36]	; (d47e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d47ba:	681b      	ldr	r3, [r3, #0]
   d47bc:	b13b      	cbz	r3, d47ce <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d47be:	b003      	add	sp, #12
   d47c0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d47c4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d47c6:	f7ff ffe5 	bl	d4794 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d47ca:	e006      	b.n	d47da <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d47cc:	2300      	movs	r3, #0
   d47ce:	9300      	str	r3, [sp, #0]
   d47d0:	461a      	mov	r2, r3
   d47d2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d47d6:	f7ff fe1d 	bl	d4414 <system_ctrl_set_result>
        break;
    }
}
   d47da:	b003      	add	sp, #12
   d47dc:	f85d fb04 	ldr.w	pc, [sp], #4
   d47e0:	2003e40c 	.word	0x2003e40c

000d47e4 <module_user_init_hook>:

void module_user_init_hook()
{
   d47e4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d47e6:	4c10      	ldr	r4, [pc, #64]	; (d4828 <module_user_init_hook+0x44>)
   d47e8:	4d10      	ldr	r5, [pc, #64]	; (d482c <module_user_init_hook+0x48>)
   d47ea:	6823      	ldr	r3, [r4, #0]
   d47ec:	42ab      	cmp	r3, r5
   d47ee:	4b10      	ldr	r3, [pc, #64]	; (d4830 <module_user_init_hook+0x4c>)
   d47f0:	bf0c      	ite	eq
   d47f2:	2201      	moveq	r2, #1
   d47f4:	2200      	movne	r2, #0
   d47f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d47f8:	d002      	beq.n	d4800 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d47fa:	f7ff ffbf 	bl	d477c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d47fe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4800:	f7ff fcee 	bl	d41e0 <HAL_RNG_GetRandomNumber>
   d4804:	4604      	mov	r4, r0
    srand(seed);
   d4806:	f000 fd51 	bl	d52ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d480a:	4b0a      	ldr	r3, [pc, #40]	; (d4834 <module_user_init_hook+0x50>)
   d480c:	b113      	cbz	r3, d4814 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d480e:	4620      	mov	r0, r4
   d4810:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4814:	2100      	movs	r1, #0
   d4816:	4807      	ldr	r0, [pc, #28]	; (d4834 <module_user_init_hook+0x50>)
   d4818:	f7ff fe56 	bl	d44c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d481c:	2100      	movs	r1, #0
   d481e:	4806      	ldr	r0, [pc, #24]	; (d4838 <module_user_init_hook+0x54>)
}
   d4820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4824:	f7ff bdec 	b.w	d4400 <system_ctrl_set_app_request_handler>
   d4828:	2003f400 	.word	0x2003f400
   d482c:	9a271c1e 	.word	0x9a271c1e
   d4830:	2003e410 	.word	0x2003e410
   d4834:	00000000 	.word	0x00000000
   d4838:	000d47ad 	.word	0x000d47ad

000d483c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d483c:	4770      	bx	lr

000d483e <_ZN9IPAddressD0Ev>:
   d483e:	b510      	push	{r4, lr}
   d4840:	2118      	movs	r1, #24
   d4842:	4604      	mov	r4, r0
   d4844:	f000 fbb4 	bl	d4fb0 <_ZdlPvj>
   d4848:	4620      	mov	r0, r4
   d484a:	bd10      	pop	{r4, pc}

000d484c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d484c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d484e:	7d03      	ldrb	r3, [r0, #20]
   d4850:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4852:	b08d      	sub	sp, #52	; 0x34
   d4854:	460e      	mov	r6, r1
   d4856:	f100 0704 	add.w	r7, r0, #4
   d485a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d485e:	d002      	beq.n	d4866 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4860:	f100 0508 	add.w	r5, r0, #8
   d4864:	e018      	b.n	d4898 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4866:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4868:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d486a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d486e:	232f      	movs	r3, #47	; 0x2f
   d4870:	462a      	mov	r2, r5
   d4872:	200a      	movs	r0, #10
   d4874:	f7ff fcec 	bl	d4250 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4878:	4628      	mov	r0, r5
   d487a:	f000 fd3f 	bl	d52fc <strlen>
   d487e:	6833      	ldr	r3, [r6, #0]
   d4880:	4602      	mov	r2, r0
   d4882:	68db      	ldr	r3, [r3, #12]
   d4884:	4629      	mov	r1, r5
   d4886:	4630      	mov	r0, r6
   d4888:	4798      	blx	r3
   d488a:	e00f      	b.n	d48ac <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d488c:	b124      	cbz	r4, d4898 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d488e:	212e      	movs	r1, #46	; 0x2e
   d4890:	4630      	mov	r0, r6
   d4892:	f7ff fedf 	bl	d4654 <_ZN5Print5printEc>
   d4896:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4898:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d489c:	220a      	movs	r2, #10
   d489e:	4630      	mov	r0, r6
   d48a0:	f7ff fef1 	bl	d4686 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48a4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48a6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48a8:	d1f0      	bne.n	d488c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48aa:	4620      	mov	r0, r4
    }
    return n;
}
   d48ac:	b00d      	add	sp, #52	; 0x34
   d48ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48b0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d48b0:	b510      	push	{r4, lr}
   d48b2:	4b05      	ldr	r3, [pc, #20]	; (d48c8 <_ZN9IPAddressC1Ev+0x18>)
   d48b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d48b6:	2211      	movs	r2, #17
   d48b8:	f840 3b04 	str.w	r3, [r0], #4
   d48bc:	2100      	movs	r1, #0
   d48be:	f000 fcec 	bl	d529a <memset>
{
    clear();
}
   d48c2:	4620      	mov	r0, r4
   d48c4:	bd10      	pop	{r4, pc}
   d48c6:	bf00      	nop
   d48c8:	000d54e0 	.word	0x000d54e0

000d48cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d48cc:	4603      	mov	r3, r0
   d48ce:	4a07      	ldr	r2, [pc, #28]	; (d48ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d48d0:	b510      	push	{r4, lr}
   d48d2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d48d6:	f101 0210 	add.w	r2, r1, #16
   d48da:	f851 4b04 	ldr.w	r4, [r1], #4
   d48de:	f843 4b04 	str.w	r4, [r3], #4
   d48e2:	4291      	cmp	r1, r2
   d48e4:	d1f9      	bne.n	d48da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d48e6:	780a      	ldrb	r2, [r1, #0]
   d48e8:	701a      	strb	r2, [r3, #0]
}
   d48ea:	bd10      	pop	{r4, pc}
   d48ec:	000d54e0 	.word	0x000d54e0

000d48f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d48f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d48f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d48f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d48fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d48fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4902:	2304      	movs	r3, #4
   d4904:	6041      	str	r1, [r0, #4]
   d4906:	7503      	strb	r3, [r0, #20]
   d4908:	bd10      	pop	{r4, pc}

000d490a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d490a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d490c:	780d      	ldrb	r5, [r1, #0]
   d490e:	788b      	ldrb	r3, [r1, #2]
   d4910:	784a      	ldrb	r2, [r1, #1]
   d4912:	78c9      	ldrb	r1, [r1, #3]
   d4914:	9100      	str	r1, [sp, #0]
   d4916:	4629      	mov	r1, r5
   d4918:	f7ff ffea 	bl	d48f0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d491c:	b003      	add	sp, #12
   d491e:	bd30      	pop	{r4, r5, pc}

000d4920 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4920:	7441      	strb	r1, [r0, #17]
   d4922:	4770      	bx	lr

000d4924 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4924:	4770      	bx	lr

000d4926 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4926:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4928:	2100      	movs	r1, #0
   d492a:	7c00      	ldrb	r0, [r0, #16]
   d492c:	f7ff fd38 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d4930:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4934:	bf28      	it	cs
   d4936:	f04f 30ff 	movcs.w	r0, #4294967295
   d493a:	bd08      	pop	{r3, pc}

000d493c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d493c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d493e:	2101      	movs	r1, #1
   d4940:	7c00      	ldrb	r0, [r0, #16]
   d4942:	f7ff fd2d 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d4946:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d494a:	bf28      	it	cs
   d494c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4950:	bd08      	pop	{r3, pc}

000d4952 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4952:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4954:	7c00      	ldrb	r0, [r0, #16]
   d4956:	f7ff fd1b 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
}
   d495a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d495e:	bd08      	pop	{r3, pc}

000d4960 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4960:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4962:	7c00      	ldrb	r0, [r0, #16]
   d4964:	f7ff fd0c 	bl	d4380 <HAL_USB_USART_Available_Data>
}
   d4968:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d496c:	bd08      	pop	{r3, pc}

000d496e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d496e:	7c00      	ldrb	r0, [r0, #16]
   d4970:	f7ff bd26 	b.w	d43c0 <HAL_USB_USART_Flush_Data>

000d4974 <_ZN9USBSerialD0Ev>:
   d4974:	b510      	push	{r4, lr}
   d4976:	2114      	movs	r1, #20
   d4978:	4604      	mov	r4, r0
   d497a:	f000 fb19 	bl	d4fb0 <_ZdlPvj>
   d497e:	4620      	mov	r0, r4
   d4980:	bd10      	pop	{r4, pc}

000d4982 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4982:	b538      	push	{r3, r4, r5, lr}
   d4984:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4986:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4988:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d498a:	f7ff fd01 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
   d498e:	2800      	cmp	r0, #0
   d4990:	dc01      	bgt.n	d4996 <_ZN9USBSerial5writeEh+0x14>
   d4992:	7c60      	ldrb	r0, [r4, #17]
   d4994:	b128      	cbz	r0, d49a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4996:	4629      	mov	r1, r5
   d4998:	7c20      	ldrb	r0, [r4, #16]
   d499a:	f7ff fd09 	bl	d43b0 <HAL_USB_USART_Send_Data>
   d499e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d49a2:	bd38      	pop	{r3, r4, r5, pc}

000d49a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49a4:	b510      	push	{r4, lr}
   d49a6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d49a8:	2300      	movs	r3, #0
   d49aa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49b0:	60a3      	str	r3, [r4, #8]
   d49b2:	4b05      	ldr	r3, [pc, #20]	; (d49c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d49b4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d49b6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49b8:	4608      	mov	r0, r1
{
  _serial = serial;
   d49ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d49bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d49be:	4611      	mov	r1, r2
   d49c0:	f7ff fcce 	bl	d4360 <HAL_USB_USART_Init>
}
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd10      	pop	{r4, pc}
   d49c8:	000d54f4 	.word	0x000d54f4

000d49cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d49cc:	2200      	movs	r2, #0
   d49ce:	7c00      	ldrb	r0, [r0, #16]
   d49d0:	f7ff bcce 	b.w	d4370 <HAL_USB_USART_Begin>

000d49d4 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d49d4:	7c00      	ldrb	r0, [r0, #16]
   d49d6:	f7ff bcfb 	b.w	d43d0 <HAL_USB_USART_Is_Enabled>

000d49da <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d49da:	f7ff bffb 	b.w	d49d4 <_ZN9USBSerial9isEnabledEv>

000d49de <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d49de:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d49e0:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d49e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d49e4:	2100      	movs	r1, #0
   d49e6:	f000 fc58 	bl	d529a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d49ea:	4620      	mov	r0, r4
   d49ec:	bd10      	pop	{r4, pc}
	...

000d49f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d49f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d49f2:	4d0e      	ldr	r5, [pc, #56]	; (d4a2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d49f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d49f6:	a801      	add	r0, sp, #4
   d49f8:	f7ff fff1 	bl	d49de <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d49fc:	6829      	ldr	r1, [r5, #0]
   d49fe:	f011 0401 	ands.w	r4, r1, #1
   d4a02:	d110      	bne.n	d4a26 <_Z16_fetch_usbserialv+0x36>
   d4a04:	4628      	mov	r0, r5
   d4a06:	f7ff fb4a 	bl	d409e <__cxa_guard_acquire>
   d4a0a:	b160      	cbz	r0, d4a26 <_Z16_fetch_usbserialv+0x36>
   d4a0c:	aa01      	add	r2, sp, #4
   d4a0e:	4621      	mov	r1, r4
   d4a10:	4807      	ldr	r0, [pc, #28]	; (d4a30 <_Z16_fetch_usbserialv+0x40>)
   d4a12:	f7ff ffc7 	bl	d49a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a16:	4628      	mov	r0, r5
   d4a18:	f7ff fb46 	bl	d40a8 <__cxa_guard_release>
   d4a1c:	4a05      	ldr	r2, [pc, #20]	; (d4a34 <_Z16_fetch_usbserialv+0x44>)
   d4a1e:	4906      	ldr	r1, [pc, #24]	; (d4a38 <_Z16_fetch_usbserialv+0x48>)
   d4a20:	4803      	ldr	r0, [pc, #12]	; (d4a30 <_Z16_fetch_usbserialv+0x40>)
   d4a22:	f000 fab7 	bl	d4f94 <__aeabi_atexit>
	return _usbserial;
}
   d4a26:	4802      	ldr	r0, [pc, #8]	; (d4a30 <_Z16_fetch_usbserialv+0x40>)
   d4a28:	b007      	add	sp, #28
   d4a2a:	bd30      	pop	{r4, r5, pc}
   d4a2c:	2003e414 	.word	0x2003e414
   d4a30:	2003e418 	.word	0x2003e418
   d4a34:	2003e3d8 	.word	0x2003e3d8
   d4a38:	000d4925 	.word	0x000d4925

000d4a3c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4a3c:	4770      	bx	lr

000d4a3e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4a3e:	7441      	strb	r1, [r0, #17]
   d4a40:	4770      	bx	lr

000d4a42 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4a42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4a44:	7c00      	ldrb	r0, [r0, #16]
   d4a46:	f7ff fc3b 	bl	d42c0 <HAL_USART_Available_Data_For_Write>
}
   d4a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a4e:	bd08      	pop	{r3, pc}

000d4a50 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4a50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4a52:	7c00      	ldrb	r0, [r0, #16]
   d4a54:	f7ff fc14 	bl	d4280 <HAL_USART_Available_Data>
}
   d4a58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a5c:	bd08      	pop	{r3, pc}

000d4a5e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4a5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4a60:	7c00      	ldrb	r0, [r0, #16]
   d4a62:	f7ff fc1d 	bl	d42a0 <HAL_USART_Peek_Data>
}
   d4a66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a6a:	bf28      	it	cs
   d4a6c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a70:	bd08      	pop	{r3, pc}

000d4a72 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4a72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4a74:	7c00      	ldrb	r0, [r0, #16]
   d4a76:	f7ff fc0b 	bl	d4290 <HAL_USART_Read_Data>
}
   d4a7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4a7e:	bf28      	it	cs
   d4a80:	f04f 30ff 	movcs.w	r0, #4294967295
   d4a84:	bd08      	pop	{r3, pc}

000d4a86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4a86:	7c00      	ldrb	r0, [r0, #16]
   d4a88:	f7ff bc12 	b.w	d42b0 <HAL_USART_Flush_Data>

000d4a8c <_ZN11USARTSerialD0Ev>:
   d4a8c:	b510      	push	{r4, lr}
   d4a8e:	2114      	movs	r1, #20
   d4a90:	4604      	mov	r4, r0
   d4a92:	f000 fa8d 	bl	d4fb0 <_ZdlPvj>
   d4a96:	4620      	mov	r0, r4
   d4a98:	bd10      	pop	{r4, pc}

000d4a9a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4a9a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4a9c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4a9e:	4604      	mov	r4, r0
   d4aa0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4aa2:	b925      	cbnz	r5, d4aae <_ZN11USARTSerial5writeEh+0x14>
   d4aa4:	7c00      	ldrb	r0, [r0, #16]
   d4aa6:	f7ff fc0b 	bl	d42c0 <HAL_USART_Available_Data_For_Write>
   d4aaa:	2800      	cmp	r0, #0
   d4aac:	dd05      	ble.n	d4aba <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4aae:	4631      	mov	r1, r6
   d4ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4ab6:	f7ff bbdb 	b.w	d4270 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4aba:	4628      	mov	r0, r5
   d4abc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ac0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ac0:	b510      	push	{r4, lr}
   d4ac2:	4604      	mov	r4, r0
   d4ac4:	4608      	mov	r0, r1
   d4ac6:	4611      	mov	r1, r2
   d4ac8:	2200      	movs	r2, #0
   d4aca:	6062      	str	r2, [r4, #4]
   d4acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ad0:	60a2      	str	r2, [r4, #8]
   d4ad2:	4a05      	ldr	r2, [pc, #20]	; (d4ae8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4ad4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4ad6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4ad8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4ada:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4adc:	461a      	mov	r2, r3
   d4ade:	f7ff fbbf 	bl	d4260 <HAL_USART_Init>
}
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	bd10      	pop	{r4, pc}
   d4ae6:	bf00      	nop
   d4ae8:	000d5524 	.word	0x000d5524

000d4aec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4aec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4aee:	4d0c      	ldr	r5, [pc, #48]	; (d4b20 <_Z22__fetch_global_Serial1v+0x34>)
   d4af0:	6829      	ldr	r1, [r5, #0]
   d4af2:	f011 0401 	ands.w	r4, r1, #1
   d4af6:	d111      	bne.n	d4b1c <_Z22__fetch_global_Serial1v+0x30>
   d4af8:	4628      	mov	r0, r5
   d4afa:	f7ff fad0 	bl	d409e <__cxa_guard_acquire>
   d4afe:	b168      	cbz	r0, d4b1c <_Z22__fetch_global_Serial1v+0x30>
   d4b00:	4a08      	ldr	r2, [pc, #32]	; (d4b24 <_Z22__fetch_global_Serial1v+0x38>)
   d4b02:	4b09      	ldr	r3, [pc, #36]	; (d4b28 <_Z22__fetch_global_Serial1v+0x3c>)
   d4b04:	4809      	ldr	r0, [pc, #36]	; (d4b2c <_Z22__fetch_global_Serial1v+0x40>)
   d4b06:	4621      	mov	r1, r4
   d4b08:	f7ff ffda 	bl	d4ac0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4b0c:	4628      	mov	r0, r5
   d4b0e:	f7ff facb 	bl	d40a8 <__cxa_guard_release>
   d4b12:	4a07      	ldr	r2, [pc, #28]	; (d4b30 <_Z22__fetch_global_Serial1v+0x44>)
   d4b14:	4907      	ldr	r1, [pc, #28]	; (d4b34 <_Z22__fetch_global_Serial1v+0x48>)
   d4b16:	4805      	ldr	r0, [pc, #20]	; (d4b2c <_Z22__fetch_global_Serial1v+0x40>)
   d4b18:	f000 fa3c 	bl	d4f94 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4b1c:	4803      	ldr	r0, [pc, #12]	; (d4b2c <_Z22__fetch_global_Serial1v+0x40>)
   d4b1e:	bd38      	pop	{r3, r4, r5, pc}
   d4b20:	2003e4c4 	.word	0x2003e4c4
   d4b24:	2003e4c8 	.word	0x2003e4c8
   d4b28:	2003e440 	.word	0x2003e440
   d4b2c:	2003e42c 	.word	0x2003e42c
   d4b30:	2003e3d8 	.word	0x2003e3d8
   d4b34:	000d4a3d 	.word	0x000d4a3d

000d4b38 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4b38:	4770      	bx	lr

000d4b3a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b3c:	4606      	mov	r6, r0
   d4b3e:	4615      	mov	r5, r2
   d4b40:	460c      	mov	r4, r1
   d4b42:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b44:	42bc      	cmp	r4, r7
   d4b46:	d006      	beq.n	d4b56 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4b48:	6833      	ldr	r3, [r6, #0]
   d4b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4b4e:	689b      	ldr	r3, [r3, #8]
   d4b50:	4630      	mov	r0, r6
   d4b52:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b54:	e7f6      	b.n	d4b44 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4b56:	4628      	mov	r0, r5
   d4b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b5a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	7c00      	ldrb	r0, [r0, #16]
   d4b5e:	f7ff bbcf 	b.w	d4300 <HAL_I2C_Write_Data>

000d4b62 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4b62:	2100      	movs	r1, #0
   d4b64:	7c00      	ldrb	r0, [r0, #16]
   d4b66:	f7ff bbd3 	b.w	d4310 <HAL_I2C_Available_Data>

000d4b6a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4b6a:	2100      	movs	r1, #0
   d4b6c:	7c00      	ldrb	r0, [r0, #16]
   d4b6e:	f7ff bbd7 	b.w	d4320 <HAL_I2C_Read_Data>

000d4b72 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4b72:	2100      	movs	r1, #0
   d4b74:	7c00      	ldrb	r0, [r0, #16]
   d4b76:	f7ff bbdb 	b.w	d4330 <HAL_I2C_Peek_Data>

000d4b7a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4b7a:	2100      	movs	r1, #0
   d4b7c:	7c00      	ldrb	r0, [r0, #16]
   d4b7e:	f7ff bbdf 	b.w	d4340 <HAL_I2C_Flush_Data>

000d4b82 <_ZN7TwoWireD0Ev>:
   d4b82:	b510      	push	{r4, lr}
   d4b84:	2114      	movs	r1, #20
   d4b86:	4604      	mov	r4, r0
   d4b88:	f000 fa12 	bl	d4fb0 <_ZdlPvj>
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4b90:	b510      	push	{r4, lr}
   d4b92:	4604      	mov	r4, r0
   d4b94:	2300      	movs	r3, #0
   d4b96:	6063      	str	r3, [r4, #4]
   d4b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b9c:	60a3      	str	r3, [r4, #8]
   d4b9e:	4b04      	ldr	r3, [pc, #16]	; (d4bb0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4ba0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4ba2:	4608      	mov	r0, r1
   d4ba4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4ba6:	4611      	mov	r1, r2
   d4ba8:	f7ff fbd2 	bl	d4350 <HAL_I2C_Init>
}
   d4bac:	4620      	mov	r0, r4
   d4bae:	bd10      	pop	{r4, pc}
   d4bb0:	000d5554 	.word	0x000d5554

000d4bb4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4bb4:	2300      	movs	r3, #0
   d4bb6:	461a      	mov	r2, r3
   d4bb8:	4619      	mov	r1, r3
   d4bba:	7c00      	ldrb	r0, [r0, #16]
   d4bbc:	f7ff bb88 	b.w	d42d0 <HAL_I2C_Begin>

000d4bc0 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4bc0:	2200      	movs	r2, #0
   d4bc2:	7c00      	ldrb	r0, [r0, #16]
   d4bc4:	f7ff bb8c 	b.w	d42e0 <HAL_I2C_Begin_Transmission>

000d4bc8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4bc8:	2200      	movs	r2, #0
   d4bca:	7c00      	ldrb	r0, [r0, #16]
   d4bcc:	f7ff bb90 	b.w	d42f0 <HAL_I2C_End_Transmission>

000d4bd0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4bd0:	2101      	movs	r1, #1
   d4bd2:	f7ff bff9 	b.w	d4bc8 <_ZN7TwoWire15endTransmissionEh>

000d4bd6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4bd6:	2200      	movs	r2, #0
   d4bd8:	4611      	mov	r1, r2
   d4bda:	6840      	ldr	r0, [r0, #4]
   d4bdc:	f7ff bc5c 	b.w	d4498 <network_listening>

000d4be0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4be0:	2200      	movs	r2, #0
   d4be2:	4611      	mov	r1, r2
   d4be4:	6840      	ldr	r0, [r0, #4]
   d4be6:	f7ff bc67 	b.w	d44b8 <network_get_listen_timeout>

000d4bea <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4bea:	2200      	movs	r2, #0
   d4bec:	6840      	ldr	r0, [r0, #4]
   d4bee:	f7ff bc5b 	b.w	d44a8 <network_set_listen_timeout>

000d4bf2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4bf2:	2200      	movs	r2, #0
   d4bf4:	f081 0101 	eor.w	r1, r1, #1
   d4bf8:	6840      	ldr	r0, [r0, #4]
   d4bfa:	f7ff bc45 	b.w	d4488 <network_listen>

000d4bfe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4bfe:	2300      	movs	r3, #0
   d4c00:	461a      	mov	r2, r3
   d4c02:	2101      	movs	r1, #1
   d4c04:	6840      	ldr	r0, [r0, #4]
   d4c06:	f7ff bc37 	b.w	d4478 <network_off>

000d4c0a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c0a:	2300      	movs	r3, #0
   d4c0c:	461a      	mov	r2, r3
   d4c0e:	4619      	mov	r1, r3
   d4c10:	6840      	ldr	r0, [r0, #4]
   d4c12:	f7ff bc29 	b.w	d4468 <network_on>

000d4c16 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c16:	2200      	movs	r2, #0
   d4c18:	4611      	mov	r1, r2
   d4c1a:	6840      	ldr	r0, [r0, #4]
   d4c1c:	f7ff bc1c 	b.w	d4458 <network_ready>

000d4c20 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4c20:	2200      	movs	r2, #0
   d4c22:	4611      	mov	r1, r2
   d4c24:	6840      	ldr	r0, [r0, #4]
   d4c26:	f7ff bc07 	b.w	d4438 <network_connecting>

000d4c2a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c2a:	2200      	movs	r2, #0
   d4c2c:	2102      	movs	r1, #2
   d4c2e:	6840      	ldr	r0, [r0, #4]
   d4c30:	f7ff bc0a 	b.w	d4448 <network_disconnect>

000d4c34 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4c34:	2300      	movs	r3, #0
   d4c36:	461a      	mov	r2, r3
   d4c38:	6840      	ldr	r0, [r0, #4]
   d4c3a:	f7ff bbf5 	b.w	d4428 <network_connect>

000d4c3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4c3e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c40:	4605      	mov	r5, r0
   d4c42:	b188      	cbz	r0, d4c68 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c44:	6804      	ldr	r4, [r0, #0]
   d4c46:	b14c      	cbz	r4, d4c5c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4c48:	68a3      	ldr	r3, [r4, #8]
   d4c4a:	b11b      	cbz	r3, d4c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c4c:	2203      	movs	r2, #3
   d4c4e:	4621      	mov	r1, r4
   d4c50:	4620      	mov	r0, r4
   d4c52:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c54:	2110      	movs	r1, #16
   d4c56:	4620      	mov	r0, r4
   d4c58:	f000 f9aa 	bl	d4fb0 <_ZdlPvj>
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	2114      	movs	r1, #20
      }
   d4c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c64:	f000 b9a4 	b.w	d4fb0 <_ZdlPvj>
   d4c68:	bd38      	pop	{r3, r4, r5, pc}

000d4c6a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4c6a:	b110      	cbz	r0, d4c72 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4c6c:	6803      	ldr	r3, [r0, #0]
   d4c6e:	685b      	ldr	r3, [r3, #4]
   d4c70:	4718      	bx	r3
   d4c72:	4770      	bx	lr

000d4c74 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4c74:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4c76:	6803      	ldr	r3, [r0, #0]
   d4c78:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4c7a:	b1bb      	cbz	r3, d4cac <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4c7c:	6858      	ldr	r0, [r3, #4]
   d4c7e:	f7ff fabf 	bl	d4200 <os_thread_is_current>
   d4c82:	b978      	cbnz	r0, d4ca4 <_ZN6ThreadD1Ev+0x30>
   d4c84:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4c86:	7c5a      	ldrb	r2, [r3, #17]
   d4c88:	b912      	cbnz	r2, d4c90 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4c8a:	6858      	ldr	r0, [r3, #4]
   d4c8c:	f7ff fac0 	bl	d4210 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4c90:	6823      	ldr	r3, [r4, #0]
   d4c92:	6858      	ldr	r0, [r3, #4]
   d4c94:	f7ff fac4 	bl	d4220 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c98:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c9e:	b128      	cbz	r0, d4cac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ca0:	f7ff ffcd 	bl	d4c3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ca4:	6820      	ldr	r0, [r4, #0]
   d4ca6:	b108      	cbz	r0, d4cac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4ca8:	f7ff ffc9 	bl	d4c3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4cac:	4620      	mov	r0, r4
   d4cae:	bd10      	pop	{r4, pc}

000d4cb0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4cb0:	b538      	push	{r3, r4, r5, lr}
   d4cb2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cb4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4cb8:	b108      	cbz	r0, d4cbe <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4cba:	f7ff f9ee 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cbe:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4cc2:	b108      	cbz	r0, d4cc8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4cc4:	f7ff fabc 	bl	d4240 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cc8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4ccc:	b135      	cbz	r5, d4cdc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cce:	4628      	mov	r0, r5
   d4cd0:	f7ff ffd0 	bl	d4c74 <_ZN6ThreadD1Ev>
   d4cd4:	2104      	movs	r1, #4
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	f000 f96a 	bl	d4fb0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4cdc:	6820      	ldr	r0, [r4, #0]
   d4cde:	b108      	cbz	r0, d4ce4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4ce0:	f7ff ffc3 	bl	d4c6a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	bd38      	pop	{r3, r4, r5, pc}

000d4ce8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4ce8:	b510      	push	{r4, lr}
   d4cea:	4b04      	ldr	r3, [pc, #16]	; (d4cfc <_ZN5spark9MeshClassD1Ev+0x14>)
   d4cec:	4604      	mov	r4, r0
   d4cee:	f840 3b08 	str.w	r3, [r0], #8
   d4cf2:	f7ff ffdd 	bl	d4cb0 <_ZN5spark11MeshPublishD1Ev>
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd10      	pop	{r4, pc}
   d4cfa:	bf00      	nop
   d4cfc:	000d557c 	.word	0x000d557c

000d4d00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4d00:	b538      	push	{r3, r4, r5, lr}
   d4d02:	4c0e      	ldr	r4, [pc, #56]	; (d4d3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4d04:	4b0e      	ldr	r3, [pc, #56]	; (d4d40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4d06:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d08:	2500      	movs	r5, #0
   d4d0a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4d0c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4d10:	6063      	str	r3, [r4, #4]
   d4d12:	60a5      	str	r5, [r4, #8]
   d4d14:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d18:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4d1c:	f7ff fa88 	bl	d4230 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4d20:	4b08      	ldr	r3, [pc, #32]	; (d4d44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4d22:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4d26:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4d2a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	4a06      	ldr	r2, [pc, #24]	; (d4d48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4d30:	4906      	ldr	r1, [pc, #24]	; (d4d4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4d36:	f000 b92d 	b.w	d4f94 <__aeabi_atexit>
   d4d3a:	bf00      	nop
   d4d3c:	2003e54c 	.word	0x2003e54c
   d4d40:	000d55e4 	.word	0x000d55e4
   d4d44:	000d557c 	.word	0x000d557c
   d4d48:	2003e3d8 	.word	0x2003e3d8
   d4d4c:	000d4ce9 	.word	0x000d4ce9

000d4d50 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4d50:	2200      	movs	r2, #0
   d4d52:	4611      	mov	r1, r2
   d4d54:	6840      	ldr	r0, [r0, #4]
   d4d56:	f7ff bb7f 	b.w	d4458 <network_ready>

000d4d5a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d5a:	2200      	movs	r2, #0
   d4d5c:	4611      	mov	r1, r2
   d4d5e:	6840      	ldr	r0, [r0, #4]
   d4d60:	f7ff bb9a 	b.w	d4498 <network_listening>

000d4d64 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d64:	2200      	movs	r2, #0
   d4d66:	4611      	mov	r1, r2
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	f7ff bba5 	b.w	d44b8 <network_get_listen_timeout>

000d4d6e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d6e:	2200      	movs	r2, #0
   d4d70:	6840      	ldr	r0, [r0, #4]
   d4d72:	f7ff bb99 	b.w	d44a8 <network_set_listen_timeout>

000d4d76 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d76:	2200      	movs	r2, #0
   d4d78:	f081 0101 	eor.w	r1, r1, #1
   d4d7c:	6840      	ldr	r0, [r0, #4]
   d4d7e:	f7ff bb83 	b.w	d4488 <network_listen>

000d4d82 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4d82:	2300      	movs	r3, #0
   d4d84:	461a      	mov	r2, r3
   d4d86:	4619      	mov	r1, r3
   d4d88:	6840      	ldr	r0, [r0, #4]
   d4d8a:	f7ff bb75 	b.w	d4478 <network_off>

000d4d8e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4d8e:	2300      	movs	r3, #0
   d4d90:	461a      	mov	r2, r3
   d4d92:	4619      	mov	r1, r3
   d4d94:	6840      	ldr	r0, [r0, #4]
   d4d96:	f7ff bb67 	b.w	d4468 <network_on>

000d4d9a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	4611      	mov	r1, r2
   d4d9e:	6840      	ldr	r0, [r0, #4]
   d4da0:	f7ff bb4a 	b.w	d4438 <network_connecting>

000d4da4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4da4:	2200      	movs	r2, #0
   d4da6:	2102      	movs	r1, #2
   d4da8:	6840      	ldr	r0, [r0, #4]
   d4daa:	f7ff bb4d 	b.w	d4448 <network_disconnect>

000d4dae <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4dae:	2300      	movs	r3, #0
   d4db0:	461a      	mov	r2, r3
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	f7ff bb38 	b.w	d4428 <network_connect>

000d4db8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4db8:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4dba:	2204      	movs	r2, #4
   d4dbc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4dbe:	4a02      	ldr	r2, [pc, #8]	; (d4dc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4dc0:	601a      	str	r2, [r3, #0]
   d4dc2:	4770      	bx	lr
   d4dc4:	2003e720 	.word	0x2003e720
   d4dc8:	000d55b0 	.word	0x000d55b0

000d4dcc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4dcc:	2300      	movs	r3, #0
   d4dce:	461a      	mov	r2, r3
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	f7ff bb29 	b.w	d4428 <network_connect>

000d4dd6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4dd6:	2200      	movs	r2, #0
   d4dd8:	2102      	movs	r1, #2
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	f7ff bb34 	b.w	d4448 <network_disconnect>

000d4de0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4de0:	2200      	movs	r2, #0
   d4de2:	4611      	mov	r1, r2
   d4de4:	6840      	ldr	r0, [r0, #4]
   d4de6:	f7ff bb27 	b.w	d4438 <network_connecting>

000d4dea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4dea:	2200      	movs	r2, #0
   d4dec:	4611      	mov	r1, r2
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	f7ff bb32 	b.w	d4458 <network_ready>

000d4df4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4df4:	2300      	movs	r3, #0
   d4df6:	461a      	mov	r2, r3
   d4df8:	4619      	mov	r1, r3
   d4dfa:	6840      	ldr	r0, [r0, #4]
   d4dfc:	f7ff bb34 	b.w	d4468 <network_on>

000d4e00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e00:	2300      	movs	r3, #0
   d4e02:	461a      	mov	r2, r3
   d4e04:	4619      	mov	r1, r3
   d4e06:	6840      	ldr	r0, [r0, #4]
   d4e08:	f7ff bb36 	b.w	d4478 <network_off>

000d4e0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	f081 0101 	eor.w	r1, r1, #1
   d4e12:	6840      	ldr	r0, [r0, #4]
   d4e14:	f7ff bb38 	b.w	d4488 <network_listen>

000d4e18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e18:	2200      	movs	r2, #0
   d4e1a:	6840      	ldr	r0, [r0, #4]
   d4e1c:	f7ff bb44 	b.w	d44a8 <network_set_listen_timeout>

000d4e20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e20:	2200      	movs	r2, #0
   d4e22:	4611      	mov	r1, r2
   d4e24:	6840      	ldr	r0, [r0, #4]
   d4e26:	f7ff bb47 	b.w	d44b8 <network_get_listen_timeout>

000d4e2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e2a:	2200      	movs	r2, #0
   d4e2c:	4611      	mov	r1, r2
   d4e2e:	6840      	ldr	r0, [r0, #4]
   d4e30:	f7ff bb32 	b.w	d4498 <network_listening>

000d4e34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e38:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e3a:	b095      	sub	sp, #84	; 0x54
   d4e3c:	4616      	mov	r6, r2
   d4e3e:	460d      	mov	r5, r1
   d4e40:	4607      	mov	r7, r0
    IPAddress addr;
   d4e42:	f7ff fd35 	bl	d48b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e46:	4621      	mov	r1, r4
   d4e48:	2220      	movs	r2, #32
   d4e4a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e4c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e4e:	f000 fa24 	bl	d529a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e52:	2340      	movs	r3, #64	; 0x40
   d4e54:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e56:	4621      	mov	r1, r4
   d4e58:	466b      	mov	r3, sp
   d4e5a:	aa0c      	add	r2, sp, #48	; 0x30
   d4e5c:	4630      	mov	r0, r6
   d4e5e:	f7ff f9af 	bl	d41c0 <netdb_getaddrinfo>
    if (!r) {
   d4e62:	4604      	mov	r4, r0
   d4e64:	2800      	cmp	r0, #0
   d4e66:	d144      	bne.n	d4ef2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e68:	4602      	mov	r2, r0
   d4e6a:	2101      	movs	r1, #1
   d4e6c:	6868      	ldr	r0, [r5, #4]
   d4e6e:	f7ff faf3 	bl	d4458 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e72:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e74:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e76:	4622      	mov	r2, r4
   d4e78:	6868      	ldr	r0, [r5, #4]
   d4e7a:	f7ff faed 	bl	d4458 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e7e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e80:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4e82:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e84:	2e00      	cmp	r6, #0
   d4e86:	d034      	beq.n	d4ef2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4e88:	2900      	cmp	r1, #0
   d4e8a:	d132      	bne.n	d4ef2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e8c:	6873      	ldr	r3, [r6, #4]
   d4e8e:	2b02      	cmp	r3, #2
   d4e90:	d002      	beq.n	d4e98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4e92:	2b0a      	cmp	r3, #10
   d4e94:	d009      	beq.n	d4eaa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4e96:	e02a      	b.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4e98:	f1b8 0f00 	cmp.w	r8, #0
   d4e9c:	d027      	beq.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e9e:	6971      	ldr	r1, [r6, #20]
   d4ea0:	4638      	mov	r0, r7
   d4ea2:	3104      	adds	r1, #4
   d4ea4:	f7ff fd31 	bl	d490a <_ZN9IPAddressaSEPKh>
   d4ea8:	e020      	b.n	d4eec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4eaa:	f1b9 0f00 	cmp.w	r9, #0
   d4eae:	d01e      	beq.n	d4eee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4eb0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4eb2:	2211      	movs	r2, #17
   d4eb4:	a801      	add	r0, sp, #4
   d4eb6:	f000 f9f0 	bl	d529a <memset>
                    a.v = 6;
   d4eba:	2306      	movs	r3, #6
   d4ebc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ec0:	ad01      	add	r5, sp, #4
   d4ec2:	f104 0308 	add.w	r3, r4, #8
   d4ec6:	3418      	adds	r4, #24
   d4ec8:	6818      	ldr	r0, [r3, #0]
   d4eca:	6859      	ldr	r1, [r3, #4]
   d4ecc:	462a      	mov	r2, r5
   d4ece:	c203      	stmia	r2!, {r0, r1}
   d4ed0:	3308      	adds	r3, #8
   d4ed2:	42a3      	cmp	r3, r4
   d4ed4:	4615      	mov	r5, r2
   d4ed6:	d1f7      	bne.n	d4ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4ed8:	a901      	add	r1, sp, #4
   d4eda:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4edc:	ad07      	add	r5, sp, #28
   d4ede:	f7ff fcf5 	bl	d48cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ee4:	1d3c      	adds	r4, r7, #4
   d4ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ee8:	682b      	ldr	r3, [r5, #0]
   d4eea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4eec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eee:	69f6      	ldr	r6, [r6, #28]
   d4ef0:	e7c8      	b.n	d4e84 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4ef2:	9800      	ldr	r0, [sp, #0]
   d4ef4:	f7ff f95c 	bl	d41b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ef8:	4638      	mov	r0, r7
   d4efa:	b015      	add	sp, #84	; 0x54
   d4efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4f00:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f02:	4a03      	ldr	r2, [pc, #12]	; (d4f10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f04:	601a      	str	r2, [r3, #0]
   d4f06:	2200      	movs	r2, #0
   d4f08:	605a      	str	r2, [r3, #4]
   d4f0a:	4770      	bx	lr
   d4f0c:	2003e728 	.word	0x2003e728
   d4f10:	000d55e4 	.word	0x000d55e4

000d4f14 <_Z17acquireWireBufferv>:
   d4f14:	b570      	push	{r4, r5, r6, lr}
   d4f16:	4604      	mov	r4, r0
   d4f18:	2514      	movs	r5, #20
   d4f1a:	462a      	mov	r2, r5
   d4f1c:	4e09      	ldr	r6, [pc, #36]	; (d4f44 <_Z17acquireWireBufferv+0x30>)
   d4f1e:	2100      	movs	r1, #0
   d4f20:	f000 f9bb 	bl	d529a <memset>
   d4f24:	8025      	strh	r5, [r4, #0]
   d4f26:	2520      	movs	r5, #32
   d4f28:	4631      	mov	r1, r6
   d4f2a:	60a5      	str	r5, [r4, #8]
   d4f2c:	6125      	str	r5, [r4, #16]
   d4f2e:	4628      	mov	r0, r5
   d4f30:	f000 f840 	bl	d4fb4 <_ZnajRKSt9nothrow_t>
   d4f34:	4631      	mov	r1, r6
   d4f36:	6060      	str	r0, [r4, #4]
   d4f38:	4628      	mov	r0, r5
   d4f3a:	f000 f83b 	bl	d4fb4 <_ZnajRKSt9nothrow_t>
   d4f3e:	60e0      	str	r0, [r4, #12]
   d4f40:	4620      	mov	r0, r4
   d4f42:	bd70      	pop	{r4, r5, r6, pc}
   d4f44:	000d5610 	.word	0x000d5610

000d4f48 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4f48:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f4a:	4d0e      	ldr	r5, [pc, #56]	; (d4f84 <_Z19__fetch_global_Wirev+0x3c>)
   d4f4c:	6829      	ldr	r1, [r5, #0]
   d4f4e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4f52:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f54:	d113      	bne.n	d4f7e <_Z19__fetch_global_Wirev+0x36>
   d4f56:	4628      	mov	r0, r5
   d4f58:	f7ff f8a1 	bl	d409e <__cxa_guard_acquire>
   d4f5c:	b178      	cbz	r0, d4f7e <_Z19__fetch_global_Wirev+0x36>
   d4f5e:	a801      	add	r0, sp, #4
   d4f60:	f7ff ffd8 	bl	d4f14 <_Z17acquireWireBufferv>
   d4f64:	aa01      	add	r2, sp, #4
   d4f66:	4621      	mov	r1, r4
   d4f68:	4807      	ldr	r0, [pc, #28]	; (d4f88 <_Z19__fetch_global_Wirev+0x40>)
   d4f6a:	f7ff fe11 	bl	d4b90 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d4f6e:	4628      	mov	r0, r5
   d4f70:	f7ff f89a 	bl	d40a8 <__cxa_guard_release>
   d4f74:	4a05      	ldr	r2, [pc, #20]	; (d4f8c <_Z19__fetch_global_Wirev+0x44>)
   d4f76:	4906      	ldr	r1, [pc, #24]	; (d4f90 <_Z19__fetch_global_Wirev+0x48>)
   d4f78:	4803      	ldr	r0, [pc, #12]	; (d4f88 <_Z19__fetch_global_Wirev+0x40>)
   d4f7a:	f000 f80b 	bl	d4f94 <__aeabi_atexit>
	return wire;
}
   d4f7e:	4802      	ldr	r0, [pc, #8]	; (d4f88 <_Z19__fetch_global_Wirev+0x40>)
   d4f80:	b007      	add	sp, #28
   d4f82:	bd30      	pop	{r4, r5, pc}
   d4f84:	2003e734 	.word	0x2003e734
   d4f88:	2003e738 	.word	0x2003e738
   d4f8c:	2003e3d8 	.word	0x2003e3d8
   d4f90:	000d4b39 	.word	0x000d4b39

000d4f94 <__aeabi_atexit>:
   d4f94:	460b      	mov	r3, r1
   d4f96:	4601      	mov	r1, r0
   d4f98:	4618      	mov	r0, r3
   d4f9a:	f000 b965 	b.w	d5268 <__cxa_atexit>
	...

000d4fa0 <_ZSt15get_new_handlerv>:
   d4fa0:	4b02      	ldr	r3, [pc, #8]	; (d4fac <_ZSt15get_new_handlerv+0xc>)
   d4fa2:	6818      	ldr	r0, [r3, #0]
   d4fa4:	f3bf 8f5f 	dmb	sy
   d4fa8:	4770      	bx	lr
   d4faa:	bf00      	nop
   d4fac:	2003e74c 	.word	0x2003e74c

000d4fb0 <_ZdlPvj>:
   d4fb0:	f7ff b871 	b.w	d4096 <_ZdlPv>

000d4fb4 <_ZnajRKSt9nothrow_t>:
   d4fb4:	f000 b800 	b.w	d4fb8 <_ZnwjRKSt9nothrow_t>

000d4fb8 <_ZnwjRKSt9nothrow_t>:
   d4fb8:	b510      	push	{r4, lr}
   d4fba:	2800      	cmp	r0, #0
   d4fbc:	bf14      	ite	ne
   d4fbe:	4604      	movne	r4, r0
   d4fc0:	2401      	moveq	r4, #1
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	f7ff fa88 	bl	d44d8 <malloc>
   d4fc8:	b920      	cbnz	r0, d4fd4 <_ZnwjRKSt9nothrow_t+0x1c>
   d4fca:	f7ff ffe9 	bl	d4fa0 <_ZSt15get_new_handlerv>
   d4fce:	b108      	cbz	r0, d4fd4 <_ZnwjRKSt9nothrow_t+0x1c>
   d4fd0:	4780      	blx	r0
   d4fd2:	e7f6      	b.n	d4fc2 <_ZnwjRKSt9nothrow_t+0xa>
   d4fd4:	bd10      	pop	{r4, pc}
	...

000d4fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d4fd8:	4b18      	ldr	r3, [pc, #96]	; (d503c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d4fda:	681a      	ldr	r2, [r3, #0]
   d4fdc:	07d1      	lsls	r1, r2, #31
   d4fde:	bf5c      	itt	pl
   d4fe0:	2201      	movpl	r2, #1
   d4fe2:	601a      	strpl	r2, [r3, #0]
   d4fe4:	4b16      	ldr	r3, [pc, #88]	; (d5040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d4fe6:	681a      	ldr	r2, [r3, #0]
   d4fe8:	07d2      	lsls	r2, r2, #31
   d4fea:	bf5c      	itt	pl
   d4fec:	2201      	movpl	r2, #1
   d4fee:	601a      	strpl	r2, [r3, #0]
   d4ff0:	4b14      	ldr	r3, [pc, #80]	; (d5044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d4ff2:	681a      	ldr	r2, [r3, #0]
   d4ff4:	07d0      	lsls	r0, r2, #31
   d4ff6:	bf5c      	itt	pl
   d4ff8:	2201      	movpl	r2, #1
   d4ffa:	601a      	strpl	r2, [r3, #0]
   d4ffc:	4b12      	ldr	r3, [pc, #72]	; (d5048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d4ffe:	681a      	ldr	r2, [r3, #0]
   d5000:	07d1      	lsls	r1, r2, #31
   d5002:	bf5c      	itt	pl
   d5004:	2201      	movpl	r2, #1
   d5006:	601a      	strpl	r2, [r3, #0]
   d5008:	4b10      	ldr	r3, [pc, #64]	; (d504c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d500a:	681a      	ldr	r2, [r3, #0]
   d500c:	07d2      	lsls	r2, r2, #31
   d500e:	bf5c      	itt	pl
   d5010:	2201      	movpl	r2, #1
   d5012:	601a      	strpl	r2, [r3, #0]
   d5014:	4b0e      	ldr	r3, [pc, #56]	; (d5050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5016:	681a      	ldr	r2, [r3, #0]
   d5018:	07d0      	lsls	r0, r2, #31
   d501a:	bf5c      	itt	pl
   d501c:	2201      	movpl	r2, #1
   d501e:	601a      	strpl	r2, [r3, #0]
   d5020:	4b0c      	ldr	r3, [pc, #48]	; (d5054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5022:	681a      	ldr	r2, [r3, #0]
   d5024:	07d1      	lsls	r1, r2, #31
   d5026:	bf5c      	itt	pl
   d5028:	2201      	movpl	r2, #1
   d502a:	601a      	strpl	r2, [r3, #0]
   d502c:	4b0a      	ldr	r3, [pc, #40]	; (d5058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d502e:	681a      	ldr	r2, [r3, #0]
   d5030:	07d2      	lsls	r2, r2, #31
   d5032:	bf5c      	itt	pl
   d5034:	2201      	movpl	r2, #1
   d5036:	601a      	strpl	r2, [r3, #0]
   d5038:	4770      	bx	lr
   d503a:	bf00      	nop
   d503c:	2003e76c 	.word	0x2003e76c
   d5040:	2003e768 	.word	0x2003e768
   d5044:	2003e764 	.word	0x2003e764
   d5048:	2003e760 	.word	0x2003e760
   d504c:	2003e75c 	.word	0x2003e75c
   d5050:	2003e758 	.word	0x2003e758
   d5054:	2003e754 	.word	0x2003e754
   d5058:	2003e750 	.word	0x2003e750

000d505c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d505c:	4b24      	ldr	r3, [pc, #144]	; (d50f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d505e:	681a      	ldr	r2, [r3, #0]
   d5060:	07d0      	lsls	r0, r2, #31
   d5062:	bf5c      	itt	pl
   d5064:	2201      	movpl	r2, #1
   d5066:	601a      	strpl	r2, [r3, #0]
   d5068:	4b22      	ldr	r3, [pc, #136]	; (d50f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d506a:	681a      	ldr	r2, [r3, #0]
   d506c:	07d1      	lsls	r1, r2, #31
   d506e:	bf5c      	itt	pl
   d5070:	2201      	movpl	r2, #1
   d5072:	601a      	strpl	r2, [r3, #0]
   d5074:	4b20      	ldr	r3, [pc, #128]	; (d50f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5076:	681a      	ldr	r2, [r3, #0]
   d5078:	07d2      	lsls	r2, r2, #31
   d507a:	bf5c      	itt	pl
   d507c:	2201      	movpl	r2, #1
   d507e:	601a      	strpl	r2, [r3, #0]
   d5080:	4b1e      	ldr	r3, [pc, #120]	; (d50fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5082:	681a      	ldr	r2, [r3, #0]
   d5084:	07d0      	lsls	r0, r2, #31
   d5086:	bf5c      	itt	pl
   d5088:	2201      	movpl	r2, #1
   d508a:	601a      	strpl	r2, [r3, #0]
   d508c:	4b1c      	ldr	r3, [pc, #112]	; (d5100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d508e:	681a      	ldr	r2, [r3, #0]
   d5090:	07d1      	lsls	r1, r2, #31
   d5092:	bf5c      	itt	pl
   d5094:	2201      	movpl	r2, #1
   d5096:	601a      	strpl	r2, [r3, #0]
   d5098:	4b1a      	ldr	r3, [pc, #104]	; (d5104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d509a:	681a      	ldr	r2, [r3, #0]
   d509c:	07d2      	lsls	r2, r2, #31
   d509e:	bf5c      	itt	pl
   d50a0:	2201      	movpl	r2, #1
   d50a2:	601a      	strpl	r2, [r3, #0]
   d50a4:	4b18      	ldr	r3, [pc, #96]	; (d5108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d50a6:	681a      	ldr	r2, [r3, #0]
   d50a8:	07d0      	lsls	r0, r2, #31
   d50aa:	bf5c      	itt	pl
   d50ac:	2201      	movpl	r2, #1
   d50ae:	601a      	strpl	r2, [r3, #0]
   d50b0:	4b16      	ldr	r3, [pc, #88]	; (d510c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d50b2:	681a      	ldr	r2, [r3, #0]
   d50b4:	07d1      	lsls	r1, r2, #31
   d50b6:	bf5c      	itt	pl
   d50b8:	2201      	movpl	r2, #1
   d50ba:	601a      	strpl	r2, [r3, #0]
   d50bc:	4b14      	ldr	r3, [pc, #80]	; (d5110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d50be:	681a      	ldr	r2, [r3, #0]
   d50c0:	07d2      	lsls	r2, r2, #31
   d50c2:	bf5c      	itt	pl
   d50c4:	2201      	movpl	r2, #1
   d50c6:	601a      	strpl	r2, [r3, #0]
   d50c8:	4b12      	ldr	r3, [pc, #72]	; (d5114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d50ca:	681a      	ldr	r2, [r3, #0]
   d50cc:	07d0      	lsls	r0, r2, #31
   d50ce:	bf5c      	itt	pl
   d50d0:	2201      	movpl	r2, #1
   d50d2:	601a      	strpl	r2, [r3, #0]
   d50d4:	4b10      	ldr	r3, [pc, #64]	; (d5118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d50d6:	681a      	ldr	r2, [r3, #0]
   d50d8:	07d1      	lsls	r1, r2, #31
   d50da:	bf5c      	itt	pl
   d50dc:	2201      	movpl	r2, #1
   d50de:	601a      	strpl	r2, [r3, #0]
   d50e0:	4b0e      	ldr	r3, [pc, #56]	; (d511c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d50e2:	681a      	ldr	r2, [r3, #0]
   d50e4:	07d2      	lsls	r2, r2, #31
   d50e6:	bf5c      	itt	pl
   d50e8:	2201      	movpl	r2, #1
   d50ea:	601a      	strpl	r2, [r3, #0]
   d50ec:	4770      	bx	lr
   d50ee:	bf00      	nop
   d50f0:	2003e79c 	.word	0x2003e79c
   d50f4:	2003e798 	.word	0x2003e798
   d50f8:	2003e794 	.word	0x2003e794
   d50fc:	2003e790 	.word	0x2003e790
   d5100:	2003e78c 	.word	0x2003e78c
   d5104:	2003e788 	.word	0x2003e788
   d5108:	2003e784 	.word	0x2003e784
   d510c:	2003e780 	.word	0x2003e780
   d5110:	2003e77c 	.word	0x2003e77c
   d5114:	2003e778 	.word	0x2003e778
   d5118:	2003e774 	.word	0x2003e774
   d511c:	2003e770 	.word	0x2003e770

000d5120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5120:	4b24      	ldr	r3, [pc, #144]	; (d51b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5122:	681a      	ldr	r2, [r3, #0]
   d5124:	07d0      	lsls	r0, r2, #31
   d5126:	bf5c      	itt	pl
   d5128:	2201      	movpl	r2, #1
   d512a:	601a      	strpl	r2, [r3, #0]
   d512c:	4b22      	ldr	r3, [pc, #136]	; (d51b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d512e:	681a      	ldr	r2, [r3, #0]
   d5130:	07d1      	lsls	r1, r2, #31
   d5132:	bf5c      	itt	pl
   d5134:	2201      	movpl	r2, #1
   d5136:	601a      	strpl	r2, [r3, #0]
   d5138:	4b20      	ldr	r3, [pc, #128]	; (d51bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d513a:	681a      	ldr	r2, [r3, #0]
   d513c:	07d2      	lsls	r2, r2, #31
   d513e:	bf5c      	itt	pl
   d5140:	2201      	movpl	r2, #1
   d5142:	601a      	strpl	r2, [r3, #0]
   d5144:	4b1e      	ldr	r3, [pc, #120]	; (d51c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5146:	681a      	ldr	r2, [r3, #0]
   d5148:	07d0      	lsls	r0, r2, #31
   d514a:	bf5c      	itt	pl
   d514c:	2201      	movpl	r2, #1
   d514e:	601a      	strpl	r2, [r3, #0]
   d5150:	4b1c      	ldr	r3, [pc, #112]	; (d51c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5152:	681a      	ldr	r2, [r3, #0]
   d5154:	07d1      	lsls	r1, r2, #31
   d5156:	bf5c      	itt	pl
   d5158:	2201      	movpl	r2, #1
   d515a:	601a      	strpl	r2, [r3, #0]
   d515c:	4b1a      	ldr	r3, [pc, #104]	; (d51c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d515e:	681a      	ldr	r2, [r3, #0]
   d5160:	07d2      	lsls	r2, r2, #31
   d5162:	bf5c      	itt	pl
   d5164:	2201      	movpl	r2, #1
   d5166:	601a      	strpl	r2, [r3, #0]
   d5168:	4b18      	ldr	r3, [pc, #96]	; (d51cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d516a:	681a      	ldr	r2, [r3, #0]
   d516c:	07d0      	lsls	r0, r2, #31
   d516e:	bf5c      	itt	pl
   d5170:	2201      	movpl	r2, #1
   d5172:	601a      	strpl	r2, [r3, #0]
   d5174:	4b16      	ldr	r3, [pc, #88]	; (d51d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5176:	681a      	ldr	r2, [r3, #0]
   d5178:	07d1      	lsls	r1, r2, #31
   d517a:	bf5c      	itt	pl
   d517c:	2201      	movpl	r2, #1
   d517e:	601a      	strpl	r2, [r3, #0]
   d5180:	4b14      	ldr	r3, [pc, #80]	; (d51d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5182:	681a      	ldr	r2, [r3, #0]
   d5184:	07d2      	lsls	r2, r2, #31
   d5186:	bf5c      	itt	pl
   d5188:	2201      	movpl	r2, #1
   d518a:	601a      	strpl	r2, [r3, #0]
   d518c:	4b12      	ldr	r3, [pc, #72]	; (d51d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d518e:	681a      	ldr	r2, [r3, #0]
   d5190:	07d0      	lsls	r0, r2, #31
   d5192:	bf5c      	itt	pl
   d5194:	2201      	movpl	r2, #1
   d5196:	601a      	strpl	r2, [r3, #0]
   d5198:	4b10      	ldr	r3, [pc, #64]	; (d51dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d519a:	681a      	ldr	r2, [r3, #0]
   d519c:	07d1      	lsls	r1, r2, #31
   d519e:	bf5c      	itt	pl
   d51a0:	2201      	movpl	r2, #1
   d51a2:	601a      	strpl	r2, [r3, #0]
   d51a4:	4b0e      	ldr	r3, [pc, #56]	; (d51e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d51a6:	681a      	ldr	r2, [r3, #0]
   d51a8:	07d2      	lsls	r2, r2, #31
   d51aa:	bf5c      	itt	pl
   d51ac:	2201      	movpl	r2, #1
   d51ae:	601a      	strpl	r2, [r3, #0]
   d51b0:	4770      	bx	lr
   d51b2:	bf00      	nop
   d51b4:	2003e7cc 	.word	0x2003e7cc
   d51b8:	2003e7c8 	.word	0x2003e7c8
   d51bc:	2003e7c4 	.word	0x2003e7c4
   d51c0:	2003e7c0 	.word	0x2003e7c0
   d51c4:	2003e7bc 	.word	0x2003e7bc
   d51c8:	2003e7b8 	.word	0x2003e7b8
   d51cc:	2003e7b4 	.word	0x2003e7b4
   d51d0:	2003e7b0 	.word	0x2003e7b0
   d51d4:	2003e7ac 	.word	0x2003e7ac
   d51d8:	2003e7a8 	.word	0x2003e7a8
   d51dc:	2003e7a4 	.word	0x2003e7a4
   d51e0:	2003e7a0 	.word	0x2003e7a0

000d51e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51e4:	4b18      	ldr	r3, [pc, #96]	; (d5248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51e6:	681a      	ldr	r2, [r3, #0]
   d51e8:	07d1      	lsls	r1, r2, #31
   d51ea:	bf5c      	itt	pl
   d51ec:	2201      	movpl	r2, #1
   d51ee:	601a      	strpl	r2, [r3, #0]
   d51f0:	4b16      	ldr	r3, [pc, #88]	; (d524c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51f2:	681a      	ldr	r2, [r3, #0]
   d51f4:	07d2      	lsls	r2, r2, #31
   d51f6:	bf5c      	itt	pl
   d51f8:	2201      	movpl	r2, #1
   d51fa:	601a      	strpl	r2, [r3, #0]
   d51fc:	4b14      	ldr	r3, [pc, #80]	; (d5250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51fe:	681a      	ldr	r2, [r3, #0]
   d5200:	07d0      	lsls	r0, r2, #31
   d5202:	bf5c      	itt	pl
   d5204:	2201      	movpl	r2, #1
   d5206:	601a      	strpl	r2, [r3, #0]
   d5208:	4b12      	ldr	r3, [pc, #72]	; (d5254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d520a:	681a      	ldr	r2, [r3, #0]
   d520c:	07d1      	lsls	r1, r2, #31
   d520e:	bf5c      	itt	pl
   d5210:	2201      	movpl	r2, #1
   d5212:	601a      	strpl	r2, [r3, #0]
   d5214:	4b10      	ldr	r3, [pc, #64]	; (d5258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5216:	681a      	ldr	r2, [r3, #0]
   d5218:	07d2      	lsls	r2, r2, #31
   d521a:	bf5c      	itt	pl
   d521c:	2201      	movpl	r2, #1
   d521e:	601a      	strpl	r2, [r3, #0]
   d5220:	4b0e      	ldr	r3, [pc, #56]	; (d525c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5222:	681a      	ldr	r2, [r3, #0]
   d5224:	07d0      	lsls	r0, r2, #31
   d5226:	bf5c      	itt	pl
   d5228:	2201      	movpl	r2, #1
   d522a:	601a      	strpl	r2, [r3, #0]
   d522c:	4b0c      	ldr	r3, [pc, #48]	; (d5260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d522e:	681a      	ldr	r2, [r3, #0]
   d5230:	07d1      	lsls	r1, r2, #31
   d5232:	bf5c      	itt	pl
   d5234:	2201      	movpl	r2, #1
   d5236:	601a      	strpl	r2, [r3, #0]
   d5238:	4b0a      	ldr	r3, [pc, #40]	; (d5264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d523a:	681a      	ldr	r2, [r3, #0]
   d523c:	07d2      	lsls	r2, r2, #31
   d523e:	bf5c      	itt	pl
   d5240:	2201      	movpl	r2, #1
   d5242:	601a      	strpl	r2, [r3, #0]
   d5244:	4770      	bx	lr
   d5246:	bf00      	nop
   d5248:	2003e7ec 	.word	0x2003e7ec
   d524c:	2003e7e8 	.word	0x2003e7e8
   d5250:	2003e7e4 	.word	0x2003e7e4
   d5254:	2003e7e0 	.word	0x2003e7e0
   d5258:	2003e7dc 	.word	0x2003e7dc
   d525c:	2003e7d8 	.word	0x2003e7d8
   d5260:	2003e7d4 	.word	0x2003e7d4
   d5264:	2003e7d0 	.word	0x2003e7d0

000d5268 <__cxa_atexit>:
   d5268:	b510      	push	{r4, lr}
   d526a:	4c05      	ldr	r4, [pc, #20]	; (d5280 <__cxa_atexit+0x18>)
   d526c:	4613      	mov	r3, r2
   d526e:	b12c      	cbz	r4, d527c <__cxa_atexit+0x14>
   d5270:	460a      	mov	r2, r1
   d5272:	4601      	mov	r1, r0
   d5274:	2002      	movs	r0, #2
   d5276:	f3af 8000 	nop.w
   d527a:	bd10      	pop	{r4, pc}
   d527c:	4620      	mov	r0, r4
   d527e:	bd10      	pop	{r4, pc}
   d5280:	00000000 	.word	0x00000000

000d5284 <memcpy>:
   d5284:	b510      	push	{r4, lr}
   d5286:	1e43      	subs	r3, r0, #1
   d5288:	440a      	add	r2, r1
   d528a:	4291      	cmp	r1, r2
   d528c:	d004      	beq.n	d5298 <memcpy+0x14>
   d528e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5292:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5296:	e7f8      	b.n	d528a <memcpy+0x6>
   d5298:	bd10      	pop	{r4, pc}

000d529a <memset>:
   d529a:	4402      	add	r2, r0
   d529c:	4603      	mov	r3, r0
   d529e:	4293      	cmp	r3, r2
   d52a0:	d002      	beq.n	d52a8 <memset+0xe>
   d52a2:	f803 1b01 	strb.w	r1, [r3], #1
   d52a6:	e7fa      	b.n	d529e <memset+0x4>
   d52a8:	4770      	bx	lr
	...

000d52ac <srand>:
   d52ac:	b538      	push	{r3, r4, r5, lr}
   d52ae:	4b12      	ldr	r3, [pc, #72]	; (d52f8 <srand+0x4c>)
   d52b0:	681c      	ldr	r4, [r3, #0]
   d52b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d52b4:	4605      	mov	r5, r0
   d52b6:	b9d3      	cbnz	r3, d52ee <srand+0x42>
   d52b8:	2018      	movs	r0, #24
   d52ba:	f7ff f90d 	bl	d44d8 <malloc>
   d52be:	f243 330e 	movw	r3, #13070	; 0x330e
   d52c2:	63a0      	str	r0, [r4, #56]	; 0x38
   d52c4:	8003      	strh	r3, [r0, #0]
   d52c6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d52ca:	8043      	strh	r3, [r0, #2]
   d52cc:	f241 2334 	movw	r3, #4660	; 0x1234
   d52d0:	8083      	strh	r3, [r0, #4]
   d52d2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d52d6:	80c3      	strh	r3, [r0, #6]
   d52d8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d52dc:	8103      	strh	r3, [r0, #8]
   d52de:	2305      	movs	r3, #5
   d52e0:	8143      	strh	r3, [r0, #10]
   d52e2:	230b      	movs	r3, #11
   d52e4:	8183      	strh	r3, [r0, #12]
   d52e6:	2201      	movs	r2, #1
   d52e8:	2300      	movs	r3, #0
   d52ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d52ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d52f0:	2200      	movs	r2, #0
   d52f2:	611d      	str	r5, [r3, #16]
   d52f4:	615a      	str	r2, [r3, #20]
   d52f6:	bd38      	pop	{r3, r4, r5, pc}
   d52f8:	2003e3d4 	.word	0x2003e3d4

000d52fc <strlen>:
   d52fc:	4603      	mov	r3, r0
   d52fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5302:	2a00      	cmp	r2, #0
   d5304:	d1fb      	bne.n	d52fe <strlen+0x2>
   d5306:	1a18      	subs	r0, r3, r0
   d5308:	3801      	subs	r0, #1
   d530a:	4770      	bx	lr

000d530c <dynalib_user>:
   d530c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d531c:	0000 0000 490a 4332 5320 6163 6e6e 7265     .....I2C Scanner
   d532c:	5300 6163 6e6e 6e69 2e67 2e2e 4900 4332     .Scanning....I2C
   d533c:	6420 7665 6369 2065 6f66 6e75 2064 7461      device found at
   d534c:	6120 6464 6572 7373 3020 0078 0030 2020      address 0x.0.  
   d535c:	0021 6e55 6e6b 776f 206e 7265 6f72 2072     !.Unknown error 
   d536c:	7461 6120 6464 6572 7373 3020 0078 6f4e     at address 0x.No
   d537c:	4920 4332 6420 7665 6369 7365 6620 756f      I2C devices fou
   d538c:	646e 000a 6f64 656e 000a 0000               nd..done....

000d5398 <_ZTVN5spark13EthernetClassE>:
	...
   d53a0:	4557 000d 454d 000d 4543 000d 4539 000d     WE..ME..CE..9E..
   d53b0:	452d 000d 4521 000d 4515 000d 450d 000d     -E..!E...E...E..
   d53c0:	4503 000d 44f9 000d 4e35 000d 6162 6475     .E...D..5N..baud
   d53d0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d53e0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d53f0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5400:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5410:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5420:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5430:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5440:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5450:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5460:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5470:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5480:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5490:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d54a0:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d54b0:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d54c0:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d54d0:	7463 6d69 0065 0000                         ctime...

000d54d8 <_ZTV9IPAddress>:
	...
   d54e0:	484d 000d 483d 000d 483f 000d               MH..=H..?H..

000d54ec <_ZTV9USBSerial>:
	...
   d54f4:	4925 000d 4975 000d 4983 000d 4601 000d     %I..uI...I...F..
   d5504:	4961 000d 4927 000d 493d 000d 496f 000d     aI..'I..=I..oI..
   d5514:	4953 000d 4921 000d                         SI..!I..

000d551c <_ZTV11USARTSerial>:
	...
   d5524:	4a3d 000d 4a8d 000d 4a9b 000d 4601 000d     =J...J...J...F..
   d5534:	4a51 000d 4a73 000d 4a5f 000d 4a87 000d     QJ..sJ.._J...J..
   d5544:	4a3f 000d 4a43 000d                         ?J..CJ..

000d554c <_ZTV7TwoWire>:
	...
   d5554:	4b39 000d 4b83 000d 4b5b 000d 4b3b 000d     9K...K..[K..;K..
   d5564:	4b63 000d 4b6b 000d 4b73 000d 4b7b 000d     cK..kK..sK..{K..

000d5574 <_ZTVN5spark9MeshClassE>:
	...
   d557c:	4c35 000d 4c2b 000d 4c21 000d 4c17 000d     5L..+L..!L...L..
   d558c:	4c0b 000d 4bff 000d 4bf3 000d 4beb 000d     .L...K...K...K..
   d559c:	4be1 000d 4bd7 000d 4e35 000d               .K...K..5N..

000d55a8 <_ZTVN5spark9WiFiClassE>:
	...
   d55b0:	4daf 000d 4da5 000d 4d9b 000d 4d51 000d     .M...M...M..QM..
   d55c0:	4d8f 000d 4d83 000d 4d77 000d 4d6f 000d     .M...M..wM..oM..
   d55d0:	4d65 000d 4d5b 000d 4e35 000d               eM..[M..5N..

000d55dc <_ZTVN5spark12NetworkClassE>:
	...
   d55e4:	4dcd 000d 4dd7 000d 4de1 000d 4deb 000d     .M...M...M...M..
   d55f4:	4df5 000d 4e01 000d 4e0d 000d 4e19 000d     .M...N...N...N..
   d5604:	4e21 000d 4e2b 000d 4e35 000d               !N..+N..5N..

000d5610 <_ZSt7nothrow>:
   d5610:	0000 0000                                   ....

000d5614 <__sf_fake_stdin>:
	...

000d5634 <__sf_fake_stdout>:
	...

000d5654 <__sf_fake_stderr>:
	...
   d5674:	0043                                        C.

000d5676 <link_const_variable_data_end>:
	...

000d5678 <link_constructors_location>:
   d5678:	000d41ad 	.word	0x000d41ad
   d567c:	000d4561 	.word	0x000d4561
   d5680:	000d4595 	.word	0x000d4595
   d5684:	000d45d9 	.word	0x000d45d9
   d5688:	000d46c9 	.word	0x000d46c9
   d568c:	000d46d9 	.word	0x000d46d9
   d5690:	000d4711 	.word	0x000d4711
   d5694:	000d4d01 	.word	0x000d4d01
   d5698:	000d4db9 	.word	0x000d4db9
   d569c:	000d4f01 	.word	0x000d4f01
   d56a0:	000d4fd9 	.word	0x000d4fd9
   d56a4:	000d505d 	.word	0x000d505d
   d56a8:	000d5121 	.word	0x000d5121
   d56ac:	000d51e5 	.word	0x000d51e5
